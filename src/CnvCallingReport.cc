/*
 *      CnvCalling.hh - this File is part of noise-free-cnv.
 *
 *      Copyright 2010-2013 Philip Ginsbach <philip.develop@gmail.com>
 *
 *      This program is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation, either version 3 of the License, or
 *      (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include "CnvCallingReport.hh"

#include "CnvSequence.hh"
#include <iostream>
#include <cmath>

/* This file defines the ReportEntry class and the create_report_html_function.

   - ReportEntry is a class used to represent CNVs. Objects of this class are
     being generated by the calling functions defined in CnvCalling.hh.
   - create_report_html generates a html file that displays all the CNVs that
     the function receives as an array of ReportEntrys in a human-readable form.

   The calling part of noise-free-cnv is largely experimental and not included
   in the GUI program noise-free-cnv-gtk. */
 

namespace Cnv { namespace Call {

void create_report_html(const Sequence& seq,
	std::vector<ReportEntry>& entr, std::ostream& os)
{
	std::sort(entr.begin(), entr.end());

	std::vector<ReportEntry>::const_iterator iter=entr.begin();
	os<<"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n"
		"\n"
		"<html lang=\"en-US\">\n"
		"<head>\n"
		"  <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n"
		"  <title>noise-free-cnv report file</title>\n"
		"  <meta name=\"description\" content=\"noise-free-cnv report file\">\n"
		"</head>\n"
		"\n"
		"<body>\n"
		"  <h1>noise-free-cnv report</h1>\n\n"
		"  <table style=\"border-spacing:0;border-collapse:collapse\">\n\n";

	for(unsigned chromo=0; chromo<=22; ++chromo)
	{
		if(iter!=entr.end()&&iter->chromosome==chromo)
		{
			os<<"    <tr><td colspan=\"4\" style=\"text-align:center\"><h2>chromosome "<<chromo<<"</h2></td></tr>\n";

			for(; iter!=entr.end()&&iter->chromosome==chromo; ++iter)
			{
				os<<"    <tr>\n";
				if(iter->type==0)
					os<<"      <td rowspan=\"2\"><strong>deletion, n=0</strong></td>\n";
				else if(iter->type==1)
					os<<"      <td rowspan=\"2\"><strong>deletion</strong></td>\n";
				else if(iter->type==3)
					os<<"      <td rowspan=\"2\"><strong>duplication</strong></td>\n";
				else if(iter->type==4)
					os<<"      <td rowspan=\"2\"><strong>duplication, n=4</strong></td>\n";
				else
					os<<"      <td rowspan=\"2\"><strong>other</strong></td>\n";


				os.precision(2); os<<std::fixed;
				os<<"      <td style=\"text-align:center\">"<<iter->start_id<<" / <strong>"<<iter->start_pos<<"</strong></td>\n"
					"      <td style=\"text-align:center\"><strong>"<<iter->end_pos-iter->start_pos+1<<"</strong> ( "<<iter->end_number-iter->start_number+1<<" )</td>\n"
					"      <td style=\"text-align:center\"><strong>"<<iter->end_pos<<"</strong> / "<<iter->end_id<<"</td>\n"
					"    </tr><tr>\n"
					"      <td><table style=\"width:200px;background-color:#F6CECE;font-size:small;border-spacing:0\"><tr>\n"
					"        <td style=\"background-color:#CEF6CE\">"<<iter->score_enter*100.0<<"</td>\n"
					"        <td style=\"width:"<<::fmax(100.0-(iter->score_enter*100.0), 1.0)<<"%\"></td>\n"
					"      </tr></table></td>\n"
					"      <td><table style=\"width:200px;background-color:#F6CECE;font-size:small;border-spacing:0\"><tr>\n"
					"        <td style=\"background-color:#CEF6CE\">"<<iter->score_inner*100.0<<"</td>\n"
					"        <td style=\"width:"<<::fmax(100.0-(iter->score_inner*100.0), 1.0)<<"%\"></td>\n"
					"      </tr></table></td>\n"
					"      <td><table style=\"width:200px;background-color:#F6CECE;font-size:small;border-spacing:0\"><tr>\n"
					"        <td style=\"background-color:#CEF6CE\">"<<iter->score_leave*100.0<<"</td>\n"
					"       <td style=\"width:"<<::fmax(100.0-(iter->score_leave*100.0), 1.0)<<"%\"></td>\n"
					"      </tr></table></td>\n"
					"    </tr>\n";
				os.unsetf(std::ios_base::floatfield);
			}
			os<<"\n";
		}
	}

	os<<"  </table>\n"
		"</body>\n"
		"</html>\n";
}

}}
